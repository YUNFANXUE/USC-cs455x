Name: Yunfan Xue 
USC NetId: yunfanxu
CSCI 455 PA1
Fall 2018

----------------------------------------------
CERTIFY IT'S YOUR WORK

"I certify that the work submitted for this assignment does not
violate USC's student conduct code.  In particular, the work is my
own, not a collaboration, and does not involve code created by other
people, except for the the resources explicitly mentioned in the CS 455
Course Syllabus.  And I did not share my solution or parts of it with
other students in the course."

Initial below to "sign" the above statement:

Yunfan Xue
----------------------------------------------
ACKNOWLEDGE ANY OUTSIDE SOURCES

List here any code you submitted for this assignment that was written
with significant help of a course staff member, or code used from the
textbook.  Be specific about what methods or algorithms are involved,
and what sections of the textbook are involved (if applicable): [you do
not need to list any of the code that we wrote for the assignment,
i.e., the contents of the starter files for the assignment]

I took the CarViewer.java as the reference of how to add the component into the window.
I took the CarComponent.java as the reference of how to orgnize the different bars.
I took the Car.java and the code below from PA1 guidline as the reference of how to draw rectangle and how to draw string.
    String label = "Hello, world!";   // suppose this is the label you want to display
    Font font = g2.getFont();
    FontRenderContext context = g2.getFontRenderContext();
    Rectangle2D labelBounds = font.getStringBounds(label, context);
    int widthOfLabel = labelBounds.getWidth();
    int heightOfLabel = labelBounds.getHeight(); 

----------------------------------------------
KNOWN BUGS or LIMITATIONS:

Because we have to round the percentage into integer, so it may loss precision like 24% + 50% + 24%


----------------------------------------------
ANY OTHER NOTES FOR THE GRADER:



----------------------------------------------
ANSWERS TO ASSIGNMENT README QUESTIONS (if applicable):

Question 1:
In CS 455 what code from the web are you allowed to use in
your assignment solution, assuming you modify that code once you get it?
(No clue? Hint: Reread the syllabus.) Note: no need to mention the "starter files" for the assignment in your answer.

    Ans: 
    The code that we are limited to use are those written  by the course staff for the purposes of helping students in the course, or code from the textbook for this course. 

Question 2:
What is the probability of each of the three outcomes in a trial: two heads, one head and one tail, and two tails? Why is one of them different than the other two?

    Ans:
    probability:
    two head: 25%
    one head and one tail: 25%
    two tails: 25%
    Because for each two coin toss in one trail, the probability of getting the head is 50%, the probability of getting tail is 50%.
    If we toss twice, the two tosses are head's probability should be 50% * 50% = 25%.
    The probability of getting two tail is 50% * 50% = 25%.
    Then the one head and one tail probability should be 1 - 25% - 25% = 50%.

Question 3:
Roughly how many trials do you need to do before you mostly get results within 1% of these probabilities? Do several simulations using your program to determine an answer to this.

    Ans:
    When I do 100 times trials, the result is: 25%, 45%, 30%
    When I do 500 times trials, the result is: 28%, 46%, 25%
    When I do 1000 times trials, the result is: 22%, 51%, 26%
    When I do 1500 times trials, the result is: 24%, 49%, 25%
    When I do 2000 times trials, the result is: 25%, 50%, 24%
    So roughly 1500 times I need to do to get the results within 1% of the probabilities.

Question 4:
Roughly how many trials can you do before it crashes with an overflow error? State the largest value you tried where it still worked correctly, and one where it overflowed. You can get an idea of what general values to try by looking at the limits on Java integers (see Section 4.1.1 of the text). Play around with your program to verify that it actually works for very large values that are within the limits. Note: this kind of testing can sometimes turn up bugs, so it's good to do. Warning: For very large values you may have to wait a fair amount of time before you get the results.

    Ans:
    I tried 42000000, it worked fine. The result is 10503975(25%), 20997516(49%), 10498509(24%).
    But if I try the number over 42000000 but less than 2000000000, it will show the wrong graph and the wrong percentage. 
    If I try number over 3000000000, it will show the error of 
	" Exception in thread "main" java.util.InputMismatchException: For input string: "3000000000" "
    Because the largest number that int can store is 2147483647, so if I input a number that is larger, then it will cause mistake.
    And the reason that when I input 42000000 causing the bug is maybe because some variables in the class may get the overflowed so all the calculation go wrong.
