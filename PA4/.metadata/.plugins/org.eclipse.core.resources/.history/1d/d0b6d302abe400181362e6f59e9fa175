/**
   this class will contain the main method

   use optional command argument. if the argument is blank, it use the defult file sowpod.txt
   if the file dose not exist, it will return a error message
*/

import java.io.FileNotFoundException;
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Map;
import java.util.TreeMap;
import java.util.Collections;

public class WordFinder {

   public static void main(String args[]) {
      try {
         String filename;
         if (args.length != 0) {
            filename = args[0];
         } else {
            //filename = "./testFiles/tinyDictionary.txt";
        	 filename = "sowpods.txt";
         }

         // initial dictionary
         AnagramDictionary dic = new AnagramDictionary(filename);

         //
         System.out.println("Type . to quit.");
         Scanner sca = new Scanner(System.in);
         String inputWord;
         inputWord = sca.next();
         //System.out.println(inputWord);
         Rack rc = new Rack(inputWord);
         ArrayList<String> subset = rc.getSubset();
         System.out.println("Subset: " + subset);
         ArrayList<String> outputString = getAllResult(subset, dic);
         System.out.println("outputString: " + outputString);
         printResult(outputString, inputWord);
      }

      catch (FileNotFoundException e) {
         System.out.println("File not Found!");
      }
   } 

   /**
      Find all the valid word in dictionary of all the subset.
      @param array input of all the subset of word
      @param dictionary input of dictionary
      //@return combination of all the valid word stored in ArrayList.
   */
   private static ArrayList<String> getAllResult(ArrayList<String> array, AnagramDictionary dictionary) {
      ArrayList<String> validWord = new ArrayList<String>();
      for(int i = 0; i < array.size(); i++) {
         validWord.addAll(dictionary.getAnagramsOf(array.get(i)));
      }
      return validWord;
   }

   private static void printResult(ArrayList<String> array, String str) {
      ScoreTable table = new ScoreTable();
      Collections.sort(array);
      System.out.println("We can make " + array.size() + " words from \"" + str + "\" All of the words with their scores (sorted by score):");
      for (int i = 0; i < array.size(); i++) {
         String cur = array.get(i);
         System.out.println(table.getScore(cur) + ": " + cur);
      }
   }
}